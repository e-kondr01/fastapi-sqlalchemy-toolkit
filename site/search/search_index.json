{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI SQLAlchemy Toolkit","text":"<p>FastAPI SQLAlchemy Toolkit \u2014 a library for the <code>FastAPI</code> + Async <code>SQLAlchemy</code> stack that helps solve the following tasks:</p> <ul> <li> <p>reducing the amount of templated, copy-pasted code that arises when developing REST APIs and interacting with databases through <code>SQLAlchemy</code>;</p> </li> <li> <p>automatic validation of values at the database level when creating and modifying objects through the API.</p> </li> </ul> <p>To achieve this, <code>FastAPI SQLAlachemy Toolkit</code> provides the <code>fastapi_sqlalchemy_toolkit.ModelManager</code> manager class for interacting with the <code>SQLAlchemy</code>.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Methods for CRUD operations with objects in the database</p> </li> <li> <p>Filtering with optional query parameters handling (see the Filtering section)</p> </li> </ul> <p>Declarative sorting using <code>ordering_dep</code> (see the Sorting section)</p> <ul> <li> <p>Validation of foreign key existence</p> </li> <li> <p>Validation of unique constraints</p> </li> <li> <p>Simplification of CRUD actions with M2M relationships</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fastapi-sqlalchemy-toolkit\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Example of <code>fastapi-sqlalchemy-toolkit</code> usage is available in the <code>examples/app</code> directory</p>"},{"location":"#read-more","title":"Read More","text":"<ul> <li>ModelManager</li> <li>Filtering</li> <li>Sorting</li> <li>Extension</li> <li>Other useful features</li> </ul>"},{"location":"extension/","title":"Extension","text":"<p>The <code>ModelManager</code> methods can be easily extended with additional logic.</p> <p>Firstly, you need to define your own <code>ModelManager</code> class:</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\n\nclass MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    ...\n</code></pre>"},{"location":"extension/#additional-validation","title":"Additional Validation","text":"<p>You can add additional validation by overriding the <code>validate</code> method:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    async def validate_parent_type(self, session: AsyncSession, validated_data: ModelDict) -&gt; None:\n        \"\"\"\n        Checks the type of the selected Parent object\n        \"\"\"\n        # The Parent object with this ID definitely exists since this is checked earlier in super().validate\n        parent = await parent_manager.get(session, id=in_obj[\"parent_id\"])\n        if parent.type != ParentTypes.CanHaveChildren:\n            raise HTTPException(\n                    status_code=status.HTTP_400_BAD_REQUEST,\n                    detail=\"This parent has incompatible type\",\n                )\n\n    async def run_db_validation(\n            self,\n            session: AsyncSession,\n            db_obj: MyModel | None = None,\n            in_obj: ModelDict | None = None,\n        ) -&gt; ModelDict:\n        validated_data = await super().validate(session, db_obj, in_obj)\n        await self.validate_parent_type(session, validated_data)\n        return validated_data\n</code></pre>"},{"location":"extension/#additional-business-logic-for-crud-operations","title":"Additional business logic for CRUD operations","text":"<p>If additional business logic needs to be executed during CRUD operations with the model, this can be done by overriding the corresponding <code>ModelManager</code> methods:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    async def create(\n        self, *args, background_tasks: BackgroundTasks | None = None, **kwargs\n    ) -&gt; MyModel:\n    created = await super().create(*args, **kwargs)\n    background_tasks.add_task(send_email, created.id)\n    return created\n</code></pre> <p>This approach aligns with the \"Fat Models, Skinny Views\" principle from Django.</p>"},{"location":"extension/#using-declarative-dilters-in-non-standard-list-queries","title":"Using declarative dilters in non-standard list queries","text":"<p>If you need to retrieve not just a list of objects but also other fields (e.g., the number of child objects) or aggregations, and you also need declarative filtering, you can create a new manager method, calling the <code>super().get_filter_expression</code> method within it:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](MyModel):\n    async def get_parents_with_children_count(\n        self, session: AsyncSession, **kwargs\n    ) -&gt; list[RetrieveParentWithChildrenCountSchema]:\n        children_count_query = (\n            select(func.count(Child.id))\n            .filter(Child.parent_id == Parent.id)\n            .scalar_subquery()\n        )\n        query = (\n            select(Parent, children_count_query.label(\"children_count\"))\n        )\n\n        # Calling the method to get SQLAlchemy filters from method arguments\n        # list \u0438 paginated_list\n        query = query.filter(self.get_filter_expression(**kwargs))\n\n        result = await session.execute(query)\n        result = result.unique().all()\n        for i, row in enumerate(result):\n            row.Parent.children_count = row.children_count\n            result[i] = row.Parent\n        return result\n</code></pre>"},{"location":"features/","title":"Other useful features","text":""},{"location":"features/#saving-user-of-the-request","title":"Saving user of the request","text":"<p>You can associate the user of the request with the object being created/updated by passing an additional parameter to the <code>create</code> (<code>update</code>) method:</p> <pre><code>@router.post(\"\")\nasync def create_child(\n    child_in: CreateUpdateChildSchema, session: Session, user: CurrentUser\n) -&gt; CreateUpdateChildSchema:\n    return await child_manager.create(session=session, in_obj=child_in, author_id=user.id)\n</code></pre>"},{"location":"features/#creating-and-updating-objects-with-m2m-relationships","title":"Creating and updating objects with M2M relationships","text":"<p>If the model has an M2M relationship defined, using <code>ModelManager</code> allows you to pass a list of object IDs to this field.</p> <p><code>fastapi-sqlalchemy-toolkit</code> validates the existence of these objects and establishes the M2M relationship for them, without the need to create separate endpoints for working with M2M relationships.</p> <pre><code># Let the Person and House models have an M2M relationship\nfrom pydantic import BaseModel\n\n\nclass PersonCreateSchema(BaseModel):\n    house_ids: list[int]\n\n...\n\n    in_obj = PersonCreateSchema(house_ids=[1, 2, 3])\n    await person_manager.create(session, in_obj)\n    # Creates a Person object and establishes an M2M relationship with Houses with ids 1, 2, and 3\n</code></pre>"},{"location":"features/#filtering-by-list-of-values","title":"Filtering by list of values","text":"<p>One way to filter by a list of values is to pass this list as a query parameter in the URL as a comma-separated string. <code>fastapi-sqlalchemy-toolkit</code> provides a utility for filtering by a list of values passed as a comma-separated string:</p> <pre><code>from uuid import UUID\nfrom fastapi_sqlalchemy_toolkit.utils import comma_list_query, get_comma_list_values\n\n@router.get(\"/children\")\nasync def get_child_objects(\n    session: Session,\n    ids: comma_list_query = None,\n) -&gt; list[ChildListSchema]\n    ids = get_comma_list_values(ids, UUID)\n    return await child_manager.list(session, id=FieldFilter(ids, operator=\"in_\"))\n</code></pre>"},{"location":"filtering/","title":"Filtering","text":"<p>To retrieve a list of objects with filtering, <code>fastapi_sqlalchemy_toolkit</code> provides two methods: <code>list</code>, which preprocesses values, and <code>filter</code>, which does not perform additional processing. Similarly, <code>paginated_list</code> and <code>paginated_filter</code> behave the same, except they paginate the result using <code>fastapi_pagination</code>.</p> <p>Let's assume the following models:</p> <pre><code>class Base(DeclarativeBase):\n    id: Mapped[_py_uuid] = mapped_column(\n        UUID(as_uuid=True), primary_key=True, default=uuid4\n    )\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True), server_default=func.now()\n    )\n\n\nclass Parent(Base):\n    title: Mapped[str]\n    slug: Mapped[str] = mapped_column(unique=True)\n    children: Mapped[list[\"Child\"]] = relationship(back_populates=\"parent\")\n\n\nclass Child(Base):\n    title: Mapped[str]\n    slug: Mapped[str] = mapped_column(unique=True)\n    parent_id: Mapped[UUID] = mapped_column(ForeignKey(\"parent.id\", ondelete=\"CASCADE\"))\n    parent: Mapped[Parent] = relationship(back_populates=\"children\")\n</code></pre> <p>And manager:</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\nchild_manager = ModelManager[Child, CreateChildSchema, PatchChildSchema](\n    Child, default_ordering=Child.title\n)\n</code></pre>"},{"location":"filtering/#simple-exact-matching-filter","title":"Simple exact matching filter","text":"<pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    slug: str | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        slug=slug,\n    )\n</code></pre> <p><code>GET /children</code> request will generate the following SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child\n</code></pre> <p><code>GET /children?slug=child-1</code> request will generate the following SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child \nWHERE child.slug = :slug_1\n</code></pre> <p>Following the <code>FastAPI</code> convention, optional query parameters are typed as <code>slug: str | None = None</code>. In this case, API clients typically expect that a request to <code>GET /children</code> will return all <code>Child</code> objects, not just those with a <code>null</code> <code>slug</code>. Therefore, the <code>list</code> (<code>paginated_list</code>) method discards filtering on this parameter if its value is not provided.</p>"},{"location":"filtering/#more-complex-filtering","title":"More complex filtering","text":"<p>To use filtering not only for exact attribute matching but also for more complex scenarios, you can pass the <code>filter_expressions</code> parameter to the <code>list</code> and <code>paginated_list</code> methods.</p> <p>The <code>filter_expressions</code> parameter takes a dictionary where keys can be:</p> <ol> <li> <p>Attributes of the main model (<code>Child.title</code>) </p> </li> <li> <p>Model attribute operators (<code>Child.title.ilike</code>)</p> </li> <li> <p><code>sqlalchemy</code> functions on model attributes (<code>func.date(Child.created_at)</code>)</p> </li> <li> <p>Attributes of the related model (<code>Parent.title</code>). It works if the model is directly related to the main model and if the models are linked by only one foreign key.</p> </li> </ol> <p>The value associated with a key in the <code>filter_expressions</code> dictionary is the value for which the filtering should occur.</p> <p>An example of filtering using an operator on a model attribute:</p> <pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    title: str | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        filter_expressions={\n            Child.title.ilike: title\n        },\n    )\n</code></pre> <p><code>GET /children</code> request will generate the following SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child\n</code></pre> <p><code>GET /children?title=ch</code> request will generate the following SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child \nWHERE lower(child.title) LIKE lower(:title_1)\n</code></pre> <p>Filtering example using <code>sqlalchemy</code> function on model attribute:</p> <pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    created_at_date: date | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        filter_expressions={\n            func.date(Child.created_at): created_at_date\n        },\n    )\n</code></pre> <p><code>GET /children?created_at_date=2023-11-19</code> request will generate the following SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child \nWHERE date(child.created_at) = :date_1\n</code></pre> <p>Filtering example on related model attribute:</p> <pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    parent_title: str | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        filter_expressions={\n            Parent.title.ilike: title\n        },\n    )\n</code></pre> <p><code>GET /children?parent_title=ch</code> request will generate the following SQL:</p> <pre><code>SELECT parent.title, parent.slug, parent.id, parent.created_at, \nchild.title AS title_1, child.slug AS slug_1, child.parent_id, child.id AS id_1,\nchild.created_at AS created_at_1 \nFROM child LEFT OUTER JOIN parent ON parent.id = child.parent_id \nWHERE lower(parent.title) LIKE lower(:title_1)\n</code></pre> <p>When filtering by fields of related models using the <code>filter_expression</code> parameter, the necessary <code>join</code> for filtering will be automatically performed. Important: It only works for models directly related to the main model and only when these models are linked by a single foreign key.</p>"},{"location":"filtering/#filtering-without-additional-processing","title":"Filtering without additional processing","text":"<p>For filtering without additional processing in the list and <code>paginated_list</code> methods, you can use the <code>where</code> parameter. The value of this parameter will be directly passed to the <code>.where()</code> method of the <code>Select</code> instance in the SQLAlchemy query expression.</p> <pre><code>    non_archived_items = await item_manager.list(session, where=(Item.archived_at == None))\n</code></pre> <p>Using the <code>where</code> parameter in the <code>list</code> and <code>paginated_list</code> methods makes sense when these methods are used in a list API endpoint and preprocessing of some query parameters is useful, but you also need to add a filter without preprocessing from <code>fastapi_sqlalchemy_toolkit</code>.</p> <p>In cases where <code>fastapi_sqlalchemy_toolkit</code> preprocessing is not needed at all, you should use the <code>filter</code> and <code>paginated_filter</code> methods:</p> <pre><code>    created_at = None\n\n    items = await item_manager.filter(session, created_at=created_at)\n</code></pre> <pre><code>SELECT item.id, item.name, item.created_at\nFROM item\nWHERE itme.created is null\n</code></pre> <p>Unlike the <code>list</code> method, the <code>filter</code> method:</p> <ol> <li> <p>Does not ignore simple filters (<code>kwargs</code>) with a <code>None</code> value</p> </li> <li> <p>Does not have the <code>filter_expressions</code> parameter, i.e., it will not perform <code>join</code>,     necessary for filtering by fields of related models.</p> </li> </ol>"},{"location":"filtering/#filtering-by-null-via-api","title":"Filtering by <code>null</code> via API","text":"<p>If in a list API endpoint, you need to be able to filter the field value by the passed value and also filter it by <code>null</code>, it is recommended to use the <code>nullable_filter_expressions</code> parameter of the <code>list</code> (<code>paginated_list</code>) methods:</p> <pre><code>from datetime import datetime\n\nfrom fastapi_sqlalchemy_toolkit import NullableQuery\n\nfrom app.managers import my_object_manager\nfrom app.models import MyObject\n\n@router.get(\"/my-objects\")\nasync def get_my_objects(\n    session: Session,\n    deleted_at: datetime | NullableQuery | None = None\n) -&gt; list[MyObjectListSchema]:\n    return await my_object_manager.list(\n        session,\n        nullable_filter_expressions={\n            MyObject.deleted_at: deleted_at\n        }\n    )\n</code></pre> <p>For the parameter with <code>null</code> filtering support, you need to specify the possible type <code>fastapi_sqlalchemy_toolkit.NullableQuery</code>.</p> <p>Now, when requesting <code>GET /my-objects?deleted_at=</code> or <code>GET /my-objects?deleted_at=null</code>, objects of <code>MyObject</code> with <code>deleted_at IS NULL</code> will be returned.</p>"},{"location":"filtering/#filtering-by-reverse-relationships","title":"Filtering by reverse relationships","text":"<p>Also, there is support for filtering by reverse relationships (<code>relationship()</code> in the one-to-many direction) using the <code>.any()</code> method.</p> <pre><code># If ParentModel.children is a one-to-many relationship\nawait parent_manager.list(session, children=[1, 2])\n# Returns Parent objects that have a relationship with ChildModel with ids 1 or 2\n</code></pre>"},{"location":"filtering/#prerequisites","title":"Prerequisites","text":"<p>An optional section demonstrating the reduction of boilerplate code when using <code>fastapi_sqlalchemy_toolkit</code>.</p> <p>If you need to add filters based on field values in a <code>FastAPI</code> endpoint, the code would look something like this:</p> <pre><code>from typing import Annotated\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Depends, Response, status\nfrom sqlalchemy import select\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom app.deps import get_async_session\nfrom app.models import MyModel, MyParentModel\nfrom app.schemas import MyObjectListSchema\n\nrouter = APIRouter()\nSession = Annotated[AsyncSession, Depends(get_async_session)]\n\n\n@router.get(\"/my-objects\")\nasync def get_my_objects(\n    session: Session,\n    user_id: UUID | None = None,\n    name: str | None = None,\n    parent_name: str | None = None,\n) -&gt; list[MyObjectListSchema]:\n    stmt = select(MyModel)\n    if user_id is not None:\n        stmt = stmt.filter_by(user_id=user_id)\n    if name is not None:\n        stmt = stmt.filter(MyModel.name.ilike == f\"%{name}%\")\n    if parent_name is not None:\n        stmt = stmt.join(MyModel.parent)\n        stmt = stmt.filter(ParentModel.name.ilike == f\"%{parent_name}%\")\n    result = await session.execute(stmt)\n    return result.scalars().all()\n</code></pre> <p>As you can see, implementing filtering requires duplicating template code.</p> <p>With <code>fastapi-sqlalchemy-toolkit</code>, this endpoint looks like this:</p> <pre><code>from fastapi_sqlalchemy_toolkit import FieldFilter\n\nfrom app.managers import my_object_manager\n\n@router.get(\"/my-objects\")\nasync def get_my_objects(\n    session: Session,\n    user_id: UUID | None = None,\n    name: str | None = None,\n    parent_name: str | None = None,\n) -&gt; list[MyObjectListSchema]:\n    return await my_object_manager.list(\n        session,\n        user_id=user_id,\n        filter_expressions={\n            MyObject.name: name,\n            MyObjectParent.name: parent_name\n        }\n    )\n</code></pre>"},{"location":"model_manager/","title":"ModelManager","text":""},{"location":"model_manager/#modelmanager-initialization","title":"ModelManager initialization","text":"<p>To use <code>fastapi-sqlaclhemy-toolkit</code>, you need to create an instance of <code>ModelManager</code> for your model:</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\nfrom .models import MyModel\nfrom .schemas import MyModelCreateSchema, MyModelUpdateSchema\n\nmy_model_manager = ModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](MyModel)\n</code></pre> <p>The <code>default_ordering</code> attribute defines the default sorting when retrieving a list of objects. You should pass the primary model field to it.</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\nfrom .models import MyModel\nfrom .schemas import MyModelCreateSchema, MyModelUpdateSchema\n\nmy_model_manager = ModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](\n    MyModel, default_ordering=MyModel.title\n)\n</code></pre>"},{"location":"model_manager/#modelmanager-methods","title":"ModelManager methods","text":"<p>Below are the CRUD methods provided by <code>ModelManager</code>. Documentation for the parameters accepted by these methods can be found in the method docstrings.</p> <ul> <li><code>create</code> - creates an object; performs validation of field values at the database level</li> <li><code>get</code> - retrieves an object</li> <li><code>get_or_404</code> - retrieves an object or returns HTTP 404 error</li> <li><code>exists</code> - checks the existence of an object</li> <li><code>paginated_list</code> / <code>paginated_filter</code> - retrieves a list of objects with filters and pagination through <code>fastapi_pagination</code></li> <li><code>list</code> / <code>filter</code> - retrieves a list of objects with filters</li> <li><code>count</code> - retrieves the count of objects</li> <li><code>update</code> - updates an object; performs validation of field values at the database level</li> <li><code>delete</code> - deletes an object</li> </ul>"},{"location":"sorting/","title":"Sorting","text":"<p><code>fastapi-sqlalchemy-toolkit</code> supports declarative sorting by model fields, as well as by fields of related models (if it is a model directly related to the main one and if these models are linked by a single foreign key). The necessary joins for sorting by fields of related models will be automatically performed.</p> <p>To apply declarative sorting: 1. Define a list of fields available for filtering. The field can be a string if it is a field of the main model, or a model attribute if it is on a related model.</p> <pre><code>from app.models import Parent\n\nchild_ordering_fields = (\n    \"title\",\n    \"created_at\",\n    Parent.title,\n    Parent.created_at\n)\n</code></pre> <p>For each of the specified fields, sorting in ascending and descending order will be available. To sort by a field in descending order, pass its name in the query parameter starting with a hyphen (Django style). Thus, <code>?order_by=title</code> sorts by <code>title</code> in ascending order, and <code>?order_by=-title</code> sorts by <code>title</code> in descending order.</p> <ol> <li>Pass the above-defined list to the <code>ordering_dep</code> parameter in the endpoint parameters</li> </ol> <pre><code>from fastapi_sqlalchemy_toolkit import ordering_dep\n\n@router.get(\"/children\")\nasync def get_child_objects(\n    session: Session,\n    order_by: ordering_dep(child_ordering_fields)\n) -&gt; list[ChildListSchema]\n    ...\n</code></pre> <ol> <li>Pass the sorting parameter as the <code>order_by</code> parameter in the <code>ModelManager</code> methods</li> </ol> <pre><code>    return await child_manager.list(session=session, order_by=order_by)\n</code></pre>"},{"location":"ru/","title":"FastAPI SQLAlchemy Toolkit","text":"<p>FastAPI SQLAlchemy Toolkit \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0441\u0442\u0435\u043a\u0430 <code>FastAPI</code> + Async <code>SQLAlchemy</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:</p> <ul> <li> <p>c\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0433\u043e, \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043f\u0440\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 REST API \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 \u0421\u0423\u0411\u0414 \u0447\u0435\u0440\u0435\u0437 <code>SQLAlchemy</code>;</p> </li> <li> <p>\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0411\u0414 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 API.</p> </li> </ul> <p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e <code>FastAPI SQLAlachemy Toolkit</code> \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 <code>fastapi_sqlalchemy_toolkit.ModelManager</code>  \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e <code>SQLAlchemy</code>.</p>"},{"location":"ru/#_1","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li> <p>\u041c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0411\u0414</p> </li> <li> <p>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f)</p> </li> <li> <p>\u0414\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>ordering_dep</code> (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430)</p> </li> <li> <p>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u043b\u044e\u0447\u0435\u0439</p> </li> <li> <p>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439</p> </li> <li> <p>\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 CRUD-\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0441 M2M \u0441\u0432\u044f\u0437\u044f\u043c\u0438</p> </li> </ul>"},{"location":"ru/#_2","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code>pip install fastapi-sqlalchemy-toolkit\n</code></pre>"},{"location":"ru/#_3","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f <code>fastapi-sqlalchemy-toolkit</code> \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 <code>examples/app</code> yt</p>"},{"location":"ru/#_4","title":"\u0423\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435","text":"<ul> <li>ModelManager</li> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430</li> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f</li> <li>\u0414\u0440\u0443\u0433\u0438\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0441\u0442\u0438</li> </ul>"},{"location":"ru/extension/","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435","text":"<p>\u041c\u0435\u0442\u043e\u0434\u044b <code>ModelManager</code> \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439.</p> <p>\u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 ModelManager:</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\n\nclass MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    ...\n</code></pre>"},{"location":"ru/extension/#_2","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u043c\u0435\u0442\u043e\u0434 <code>validate</code>:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    async def validate_parent_type(self, session: AsyncSession, validated_data: ModelDict) -&gt; None:\n        \"\"\"\n        \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u0438\u043f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 Parent\n        \"\"\"\n        # \u043e\u0431\u044a\u0435\u043a\u0442 Parent \u0441 \u0442\u0430\u043a\u0438\u043c ID \u0442\u043e\u0447\u043d\u043e \u0435\u0441\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u0435\u0435 \u0432 super().validate\n        parent = await parent_manager.get(session, id=in_obj[\"parent_id\"])\n        if parent.type != ParentTypes.CanHaveChildren:\n            raise HTTPException(\n                    status_code=status.HTTP_400_BAD_REQUEST,\n                    detail=\"This parent has incompatible type\",\n                )\n\n    async def run_db_validation(\n            self,\n            session: AsyncSession,\n            db_obj: MyModel | None = None,\n            in_obj: ModelDict | None = None,\n        ) -&gt; ModelDict:\n        validated_data = await super().validate(session, db_obj, in_obj)\n        await self.validate_parent_type(session, validated_data)\n        return validated_data\n</code></pre>"},{"location":"ru/extension/#crud","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0430 \u043f\u0440\u0438 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445","text":"<p>\u0415\u0441\u043b\u0438 \u043f\u0440\u0438 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0443, \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b ModelManager:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    async def create(\n        self, *args, background_tasks: BackgroundTasks | None = None, **kwargs\n    ) -&gt; MyModel:\n    created = await super().create(*args, **kwargs)\n    background_tasks.add_task(send_email, created.id)\n    return created\n</code></pre> <p>\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \"Fat Models, Skinny Views\" \u0438\u0437 Django.</p>"},{"location":"ru/extension/#_3","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0432 \u043d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043e\u0447\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445","text":"<p>\u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043d\u043e \u0438 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u043e\u043b\u044f (\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u043a\u043e\u043b-\u0432\u043e \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432) \u0438\u043b\u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438, \u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u043e\u0432\u044b\u0439 \u0441\u0432\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430, \u0432\u044b\u0437\u0432\u0430\u0432 \u0432 \u043d\u0451\u043c \u043c\u0435\u0442\u043e\u0434 <code>super().get_filter_expression</code>:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](MyModel):\n    async def get_parents_with_children_count(\n        self, session: AsyncSession, **kwargs\n    ) -&gt; list[RetrieveParentWithChildrenCountSchema]:\n        children_count_query = (\n            select(func.count(Child.id))\n            .filter(Child.parent_id == Parent.id)\n            .scalar_subquery()\n        )\n        query = (\n            select(Parent, children_count_query.label(\"children_count\"))\n        )\n\n        # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 SQLAlchemy \u0438\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\n        # list \u0438 paginated_list\n        query = query.filter(self.get_filter_expression(**kwargs))\n\n        result = await session.execute(query)\n        result = result.unique().all()\n        for i, row in enumerate(result):\n            row.Parent.children_count = row.children_count\n            result[i] = row.Parent\n        return result\n</code></pre>"},{"location":"ru/features/","title":"\u0414\u0440\u0443\u0433\u0438\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/features/#_1","title":"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0432 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u043c/\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432 \u043c\u0435\u0442\u043e\u0434 <code>create</code> (<code>update</code>):</p> <pre><code>@router.post(\"\")\nasync def create_child(\n    child_in: CreateUpdateChildSchema, session: Session, user: CurrentUser\n) -&gt; CreateUpdateChildSchema:\n    return await child_manager.create(session=session, in_obj=child_in, author_id=user.id)\n</code></pre>"},{"location":"ru/features/#m2m","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 M2M \u0441\u0432\u044f\u0437\u044f\u043c\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 M2M \u0441\u0432\u044f\u0437\u044c, \u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>ModelManager</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u044d\u0442\u043e \u043f\u043e\u043b\u0435 \u0441\u043f\u0438\u0441\u043e\u043a ID \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p> <p><code>fastapi-sqlalchemy-toolkit</code> \u043f\u0440\u043e\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0438\u043c M2M \u0441\u0432\u044f\u0437\u044c, \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 M2M \u0441\u0432\u044f\u0437\u044f\u043c\u0438.</p> <pre><code># \u041f\u0443\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 Person \u0438 House \u0438\u043c\u0435\u044e\u0442 M2M \u0441\u0432\u044f\u0437\u044c\nfrom pydantic import BaseModel\n\n\nclass PersonCreateSchema(BaseModel):\n    house_ids: list[int]\n\n...\n\n    in_obj = PersonCreateSchema(house_ids=[1, 2, 3])\n    await person_manager.create(session, in_obj)\n    # \u0421\u043e\u0437\u0434\u0430\u0441\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 Person \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0435\u043c\u0443 M2M \u0441\u0432\u044f\u0437\u044c \u0441 House \u0441 id 1, 2 \u0438 3\n</code></pre>"},{"location":"ru/features/#_2","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","text":"<p>\u041e\u0434\u0438\u043d \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 -- \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0432\u0435\u0440\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e. <code>fastapi-sqlalchemy-toolkit</code> \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u0443 \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e:</p> <pre><code>from uuid import UUID\nfrom fastapi_sqlalchemy_toolkit.utils import comma_list_query, get_comma_list_values\n\n@router.get(\"/children\")\nasync def get_child_objects(\n    session: Session,\n    ids: comma_list_query = None,\n) -&gt; list[ChildListSchema]\n    ids = get_comma_list_values(ids, UUID)\n    return await child_manager.list(session, id=FieldFilter(ids, operator=\"in_\"))\n</code></pre>"},{"location":"ru/filtering/","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439 <code>fastapi_sqlalchemy_toolkit</code> \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430: <code>list</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0438 <code>filter</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043e\u043a. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0432\u0435\u0434\u0443\u0442 \u0441\u0435\u0431\u044f \u043c\u0435\u0442\u043e\u0434\u044b <code>paginated_list</code> \u0438 <code>paginated_filter</code>, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043e\u043d\u0438 \u043f\u0430\u0433\u0438\u043d\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>fastapi_pagination</code>.</p> <p>\u041f\u0443\u0441\u0442\u044c \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:</p> <pre><code>class Base(DeclarativeBase):\n    id: Mapped[_py_uuid] = mapped_column(\n        UUID(as_uuid=True), primary_key=True, default=uuid4\n    )\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True), server_default=func.now()\n    )\n\n\nclass Parent(Base):\n    title: Mapped[str]\n    slug: Mapped[str] = mapped_column(unique=True)\n    children: Mapped[list[\"Child\"]] = relationship(back_populates=\"parent\")\n\n\nclass Child(Base):\n    title: Mapped[str]\n    slug: Mapped[str] = mapped_column(unique=True)\n    parent_id: Mapped[UUID] = mapped_column(ForeignKey(\"parent.id\", ondelete=\"CASCADE\"))\n    parent: Mapped[Parent] = relationship(back_populates=\"children\")\n</code></pre> <p>\u0418 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440:</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\nchild_manager = ModelManager[Child, CreateChildSchema, PatchChildSchema](\n    Child, default_ordering=Child.title\n)\n</code></pre>"},{"location":"ru/filtering/#_1","title":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u043e\u0447\u043d\u043e\u043c\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044e","text":"<pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    slug: str | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        slug=slug,\n    )\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 <code>GET /children</code> \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 <code>GET /children?slug=child-1</code> \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child \nWHERE child.slug = :slug_1\n</code></pre> <p>\u041f\u043e \u043a\u043e\u043d\u0432\u0435\u043d\u0446\u0438\u0438 <code>FastAPI</code>, \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a <code>slug: str | None = None</code>. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u044b API \u043e\u0431\u044b\u0447\u043d\u043e \u043e\u0436\u0438\u0434\u0430\u044e\u0442, \u0447\u0442\u043e \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 <code>GET /children</code> \u0431\u0443\u0434\u0443\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b \u0432\u0441\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b <code>Child</code>, \u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 <code>slug is null</code>. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434 <code>list</code> (<code>paginated_list</code>) \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443, \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e.</p>"},{"location":"ru/filtering/#_2","title":"\u0411\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0442\u043e\u0447\u043d\u043e\u043c\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u0438, \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 <code>list</code> \u0438 <code>paginated_list</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>filter_expressions</code>.</p> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>filter_expressions</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c:</p> <ol> <li> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (<code>Child.title</code>) </p> </li> <li> <p>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 (<code>Child.title.ilike</code>)</p> </li> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 <code>sqlalchemy</code> \u043d\u0430\u0434 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 (<code>func.date(Child.created_at)</code>)</p> </li> <li> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (<code>Parent.title</code>). \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447.</p> </li> </ol> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043a\u043b\u044e\u0447\u0443 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 <code>filter_expressions</code> -- \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0443 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438:</p> <pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    title: str | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        filter_expressions={\n            Child.title.ilike: title\n        },\n    )\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 <code>GET /children</code> \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 <code>GET /children?title=ch</code> \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child \nWHERE lower(child.title) LIKE lower(:title_1)\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>sqlalchemy</code> \u043d\u0430\u0434 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0438:</p> <pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    created_at_date: date | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        filter_expressions={\n            func.date(Child.created_at): created_at_date\n        },\n    )\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 <code>GET /children?created_at_date=2023-11-19</code> \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 SQL:</p> <pre><code>SELECT child.title, child.slug, child.parent_id, child.id, child.created_at \nFROM child \nWHERE date(child.created_at) = :date_1\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438:</p> <pre><code>@router.get(\"/children\")\nasync def get_list(\n    session: Session,\n    parent_title: str | None = None,\n) -&gt; list[ChildListSchema]:\n    return await child_manager.list(\n        session,\n        filter_expressions={\n            Parent.title.ilike: title\n        },\n    )\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 <code>GET /children?parent_title=ch</code> \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 SQL:</p> <pre><code>SELECT parent.title, parent.slug, parent.id, parent.created_at, \nchild.title AS title_1, child.slug AS slug_1, child.parent_id, child.id AS id_1,\nchild.created_at AS created_at_1 \nFROM child LEFT OUTER JOIN parent ON parent.id = child.parent_id \nWHERE lower(parent.title) LIKE lower(:title_1)\n</code></pre> <p>\u041f\u0440\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>filter_expression</code>,  \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 <code>join</code> \u0431\u0443\u0434\u0443\u0442 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. \u0412\u0430\u0436\u043d\u043e: \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0433\u0434\u0430, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447.</p>"},{"location":"ru/filtering/#_3","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","text":"<p>\u0414\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 <code>list</code> \u0438 <code>paginated_list</code> \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>where</code>. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u0432 \u043c\u0435\u0442\u043e\u0434 <code>.where()</code> \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 <code>Select</code> \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 <code>SQLAlchemy</code>.</p> <pre><code>    non_archived_items = await item_manager.list(session, where=(Item.archived_at == None))\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>where</code> \u043c\u0435\u0442\u043e\u0434\u043e\u0432 <code>list</code> \u0438 <code>paginated_list</code> \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0442\u043e\u0433\u0434\u0430, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u0447\u043d\u043e\u043c API \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0435 \u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0447\u0430\u0441\u0442\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u0430, \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0443\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440 \u0431\u0435\u0437 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043e\u0442 <code>fastapi_sqlalchemy_toolkit</code>.</p> <p>\u0412 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 <code>fastapi_sqlalchemy_toolkit</code> \u043d\u0435 \u043d\u0443\u0436\u043d\u044b \u0432\u043e\u043e\u0431\u0449\u0435, \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b <code>filter</code> \u0438 <code>paginated_filter</code>:</p> <pre><code>    created_at = None\n\n    items = await item_manager.filter(session, created_at=created_at)\n</code></pre> <pre><code>SELECT item.id, item.name, item.created_at\nFROM item\nWHERE itme.created is null\n</code></pre> <p>\u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 <code>list</code>, \u043c\u0435\u0442\u043e\u0434 <code>filter</code>:</p> <ol> <li> <p>\u041d\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (<code>kwargs</code>) \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c <code>None</code></p> </li> <li> <p>\u041d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 <code>filter_expressions</code>, \u0442. \u0435. \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c <code>join</code>, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p> </li> </ol>"},{"location":"ru/filtering/#null-api","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e <code>null</code> \u0447\u0435\u0440\u0435\u0437 API","text":"<p>\u0415\u0441\u043b\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u0447\u043d\u043e\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0435 API \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043a\u0430\u043a \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u043f\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e, \u0442\u0430\u043a \u0438 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043f\u043e <code>null</code>, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>nullable_filter_expressions</code> \u043c\u0435\u0442\u043e\u0434\u043e\u0432 <code>list</code> (<code>paginated_list</code>):</p> <pre><code>from datetime import datetime\n\nfrom fastapi_sqlalchemy_toolkit import NullableQuery\n\nfrom app.managers import my_object_manager\nfrom app.models import MyObject\n\n@router.get(\"/my-objects\")\nasync def get_my_objects(\n    session: Session,\n    deleted_at: datetime | NullableQuery | None = None\n) -&gt; list[MyObjectListSchema]:\n    return await my_object_manager.list(\n        session,\n        nullable_filter_expressions={\n            MyObject.deleted_at: deleted_at\n        }\n    )\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e <code>null</code> \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0439 \u0442\u0438\u043f <code>fastapi_sqlalchemy_toolkit.NullableQuery</code>.</p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 <code>GET /my-objects?deleted_at=</code> \u0438\u043b\u0438 <code>GET /my-objects?deleted_at=null</code> \u0432\u0435\u0440\u043d\u0443\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u044b <code>MyObject</code>, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 <code>deleted_at IS NULL</code>.</p>"},{"location":"ru/filtering/#_4","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u043c \u0441\u0432\u044f\u0437\u044f\u043c","text":"<p>\u0422\u0430\u043a\u0436\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u043c \u0441\u0432\u044f\u0437\u044f\u043c (<code>relationship()</code> \u0432 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0434\u0438\u043d \u043a\u043e \u043c\u043d\u043e\u0433\u0438\u043c) \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0430 <code>.any()</code>.</p> <pre><code># \u0415\u0441\u043b\u0438 ParentModel.children -- \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u044c \u043e\u0434\u0438\u043d \u043a\u043e \u043c\u043d\u043e\u0433\u0438\u043c\nawait parent_manager.list(session, children=[1, 2])\n# \u0412\u0435\u0440\u043d\u0451\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u044b Parent, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u0441 ChildModel \u0441 id 1 \u0438\u043b\u0438 2\n</code></pre>"},{"location":"ru/filtering/#_5","title":"\u041f\u0440\u0435\u0434\u043f\u043e\u0441\u044b\u043b\u043a\u0438","text":"<p>\u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0441 \u0434\u0435\u043c\u043e \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 <code>fastapi_sqlalchemy_toolkit</code>.</p> <p>\u0415\u0441\u043b\u0438 \u0432 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 <code>FastAPI</code> \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u043f\u043e\u043b\u0435\u0439, \u0442\u043e \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a:</p> <pre><code>from typing import Annotated\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Depends, Response, status\nfrom sqlalchemy import select\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom app.deps import get_async_session\nfrom app.models import MyModel, MyParentModel\nfrom app.schemas import MyObjectListSchema\n\nrouter = APIRouter()\nSession = Annotated[AsyncSession, Depends(get_async_session)]\n\n\n@router.get(\"/my-objects\")\nasync def get_my_objects(\n    session: Session,\n    user_id: UUID | None = None,\n    name: str | None = None,\n    parent_name: str | None = None,\n) -&gt; list[MyObjectListSchema]:\n    stmt = select(MyModel)\n    if user_id is not None:\n        stmt = stmt.filter_by(user_id=user_id)\n    if name is not None:\n        stmt = stmt.filter(MyModel.name.ilike == f\"%{name}%\")\n    if parent_name is not None:\n        stmt = stmt.join(MyModel.parent)\n        stmt = stmt.filter(ParentModel.name.ilike == f\"%{parent_name}%\")\n    result = await session.execute(stmt)\n    return result.scalars().all()\n</code></pre> <p>\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430.</p> <p>\u0412 <code>fastapi-sqlalchemy-toolkit</code> \u044d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a:</p> <pre><code>from fastapi_sqlalchemy_toolkit import FieldFilter\n\nfrom app.managers import my_object_manager\n\n@router.get(\"/my-objects\")\nasync def get_my_objects(\n    session: Session,\n    user_id: UUID | None = None,\n    name: str | None = None,\n    parent_name: str | None = None,\n) -&gt; list[MyObjectListSchema]:\n    return await my_object_manager.list(\n        session,\n        user_id=user_id,\n        filter_expressions={\n            MyObject.name: name,\n            MyObjectParent.name: parent_name\n        }\n    )\n</code></pre>"},{"location":"ru/filtering/#headdocsrufilteringmd","title":"&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:docs/ru/filtering.md","text":""},{"location":"ru/filtering/#_6","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430","text":"<p><code>fastapi-sqlalchemy-toolkit</code> \u043f\u043e\u0434\u0434\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438,  \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (\u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u044d\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447). \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 join'\u044b \u0431\u0443\u0434\u0443\u0442 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.</p> <p>\u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0443\u0436\u043d\u043e: 1. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f.</p> <p>\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u043f\u043e\u043b\u0435\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438:</p> <pre><code>from app.models import Child\n\nchild_ordering_fields = (\n    Child.title,\n    Child.created_at\n)\n</code></pre> <p>\u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044f \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438: <code>title</code>, <code>-title</code>, <code>created_at</code>, <code>-created_at</code>.</p> <p>\u0414\u0435\u0444\u0438\u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e.</p> <p>\u041b\u0438\u0431\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439:</p> <pre><code>from app.models import Child, Parent\n\nchild_ordering_fields = (\n    \"title\": MyModel.title,\n    \"parent_title\": ParentModel.title\n)\n</code></pre> <p>\u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044f \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438: <code>title</code>, <code>-title</code>, <code>parent_title</code>, <code>-parent_title</code>.</p> <ol> <li>\u0412 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u044d\u043d\u043f\u0434\u043e\u0438\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 <code>ordering_depends</code></li> </ol> <pre><code>from fastapi_sqlalchemy_toolkit import ordering_depends\n\n@router.get(\"/children\")\nasync def get_child_objects(\n    session: Session,\n    order_by: ordering_depends(child_ordering_fields)\n) -&gt; list[ChildListSchema]\n    ...\n</code></pre> <ol> <li>\u041f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>order_by</code> \u0432 \u043c\u0435\u0442\u043e\u0434\u044b <code>ModelManager</code></li> </ol> <pre><code>    return await child_manager.list(session=session, order_by=order_by)\n</code></pre> <p>\u0415\u0441\u043b\u0438 <code>order_by</code> \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u043c\u0435\u0442\u043e\u0434\u044b <code>list</code> \u0438\u043b\u0438 <code>paginated_list</code>, \u0438 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0443\u044e \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439, \u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 <code>join</code> \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438.</p>"},{"location":"ru/filtering/#_7","title":"\u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438","text":"<p><code>fastapi-sqlalchemy-toolkit</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438 <code>SQAlchemy</code>.</p>"},{"location":"ru/filtering/#commit-as-you-go","title":"Commit as you go","text":"<p>https://docs.sqlalchemy.org/en/20/orm/session_transaction.html#commit-as-you-go</p> <pre><code>from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine\nfrom app.managers import my_model_manager\n\n...\n\n    engine = create_async_engine(\n        \"...\",\n    )\n    async with async_sessionmaker(engine) as session:\n        # This call produces SQL COMMIT\n        created_obj = await my_model_manager.create(session, input_data)\n        # This call does not produce SQL COMMIT\n        await my_model_manager.update(session, created_obj, name=\"updated_name\", commit=False)\n    # Only 1st statement is persisted\n</code></pre>"},{"location":"ru/filtering/#begin-once","title":"Begin once","text":"<p>https://docs.sqlalchemy.org/en/20/orm/session_transaction.html#begin-once</p> <pre><code>from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine\nfrom app.managers import my_model_manager\n\n...\n\n    engine = create_async_engine(\n        \"...\",\n    )\n    # Start transaction with context manager\n    async with async_sessionmaker(engine) as session, session.begin():\n        # This call only flushes, no SQL COMMIT yet\n        created_obj = await my_model_manager.create(session, input_data)\n        # This call only flushes, no SQL COMMIT yet\n        await my_model_manager.update(session, created_obj, name=\"updated_name\")\n    # Everything is SQL COMMITed, if no errors occured in nested block\n</code></pre>"},{"location":"ru/filtering/#_8","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432","text":"<p>TODO...</p>"},{"location":"ru/filtering/#_9","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435","text":"<p>\u041c\u0435\u0442\u043e\u0434\u044b <code>ModelManager</code> \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439.</p> <p>\u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 ModelManager:</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\n\nclass MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    ...\n</code></pre>"},{"location":"ru/filtering/#_10","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u043c\u0435\u0442\u043e\u0434 <code>validate</code>:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    async def validate_parent_type(self, session: AsyncSession, validated_data: ModelDict) -&gt; None:\n        \"\"\"\n        \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u0438\u043f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 Parent\n        \"\"\"\n        # \u043e\u0431\u044a\u0435\u043a\u0442 Parent \u0441 \u0442\u0430\u043a\u0438\u043c ID \u0442\u043e\u0447\u043d\u043e \u0435\u0441\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u0435\u0435 \u0432 super().validate\n        parent = await parent_manager.get(session, id=in_obj[\"parent_id\"])\n        if parent.type != ParentTypes.CanHaveChildren:\n            raise HTTPException(\n                    status_code=status.HTTP_400_BAD_REQUEST,\n                    detail=\"This parent has incompatible type\",\n                )\n\n    async def run_db_validation(\n            self,\n            session: AsyncSession,\n            db_obj: MyModel | None = None,\n            in_obj: ModelDict | None = None,\n        ) -&gt; ModelDict:\n        validated_data = await super().validate(session, db_obj, in_obj)\n        await self.validate_parent_type(session, validated_data)\n        return validated_data\n</code></pre>"},{"location":"ru/filtering/#crud","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0430 \u043f\u0440\u0438 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445","text":"<p>\u0415\u0441\u043b\u0438 \u043f\u0440\u0438 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0443, \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b ModelManager:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](ModelManager):\n    async def create(\n        self, *args, background_tasks: BackgroundTasks | None = None, **kwargs\n    ) -&gt; MyModel:\n    created = await super().create(*args, **kwargs)\n    background_tasks.add_task(send_email, created.id)\n    return created\n</code></pre> <p>\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \"Fat Models, Skinny Views\" \u0438\u0437 Django.</p>"},{"location":"ru/filtering/#_11","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0432 \u043d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043e\u0447\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445","text":"<p>\u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043d\u043e \u0438 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u043e\u043b\u044f (\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u043a\u043e\u043b-\u0432\u043e \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432) \u0438\u043b\u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438, \u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u043e\u0432\u044b\u0439 \u0441\u0432\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430, \u0432\u044b\u0437\u0432\u0430\u0432 \u0432 \u043d\u0451\u043c \u043c\u0435\u0442\u043e\u0434 <code>super().get_filter_expression</code>:</p> <pre><code>class MyModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](MyModel):\n    async def get_parents_with_children_count(\n        self, session: AsyncSession, **kwargs\n    ) -&gt; list[RetrieveParentWithChildrenCountSchema]:\n        children_count_query = (\n            select(func.count(Child.id))\n            .filter(Child.parent_id == Parent.id)\n            .scalar_subquery()\n        )\n        query = (\n            select(Parent, children_count_query.label(\"children_count\"))\n        )\n\n        # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 SQLAlchemy \u0438\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\n        # list \u0438 paginated_list\n        query = query.filter(self.get_filter_expression(**kwargs))\n\n        result = await session.execute(query)\n        result = result.unique().all()\n        for i, row in enumerate(result):\n            row.Parent.children_count = row.children_count\n            result[i] = row.Parent\n        return result\n</code></pre>"},{"location":"ru/filtering/#_12","title":"\u0414\u0440\u0443\u0433\u0438\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/filtering/#_13","title":"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0432 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u043c/\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432 \u043c\u0435\u0442\u043e\u0434 <code>create</code> (<code>update</code>):</p> <pre><code>@router.post(\"\")\nasync def create_child(\n    child_in: CreateUpdateChildSchema, session: Session, user: CurrentUser\n) -&gt; CreateUpdateChildSchema:\n    return await child_manager.create(session=session, in_obj=child_in, author_id=user.id)\n</code></pre>"},{"location":"ru/filtering/#m2m","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 M2M \u0441\u0432\u044f\u0437\u044f\u043c\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 M2M \u0441\u0432\u044f\u0437\u044c, \u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>ModelManager</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u044d\u0442\u043e \u043f\u043e\u043b\u0435 \u0441\u043f\u0438\u0441\u043e\u043a ID \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p> <p><code>fastapi-sqlalchemy-toolkit</code> \u043f\u0440\u043e\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0438\u043c M2M \u0441\u0432\u044f\u0437\u044c, \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 M2M \u0441\u0432\u044f\u0437\u044f\u043c\u0438.</p> <pre><code># \u041f\u0443\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 Person \u0438 House \u0438\u043c\u0435\u044e\u0442 M2M \u0441\u0432\u044f\u0437\u044c\nfrom pydantic import BaseModel\n\n\nclass PersonCreateSchema(BaseModel):\n    house_ids: list[int]\n\n...\n\n    in_obj = PersonCreateSchema(house_ids=[1, 2, 3])\n    await person_manager.create(session, in_obj)\n    # \u0421\u043e\u0437\u0434\u0430\u0441\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 Person \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0435\u043c\u0443 M2M \u0441\u0432\u044f\u0437\u044c \u0441 House \u0441 id 1, 2 \u0438 3\n</code></pre>"},{"location":"ru/filtering/#_14","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","text":"<p>\u041e\u0434\u0438\u043d \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 -- \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0432\u0435\u0440\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e. <code>fastapi-sqlalchemy-toolkit</code> \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u0443 \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e:</p> <pre><code>from uuid import UUID\nfrom fastapi_sqlalchemy_toolkit.utils import CommaSepQuery, comma_sep_q_to_list\n\n@router.get(\"/children\")\nasync def get_child_objects(\n    session: Session,\n    ids: CommaSepQuery = None,\n) -&gt; list[ChildListSchema]\n    ids = comma_sep_q_to_list(ids, UUID)\n    return await child_manager.list(session, filter_expressions={Child.id.in_: ids})\n</code></pre> <p>c768257cf8d5a8f02e52b2973c53e9a5fa757caf:README.md</p>"},{"location":"ru/model_manager/#modelmanager","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f ModelManager","text":"<p>\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f <code>fastapi-sqlaclhemy-toolkit</code> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>ModelManager</code> \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438:</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\nfrom .models import MyModel\nfrom .schemas import MyModelCreateSchema, MyModelUpdateSchema\n\nmy_model_manager = ModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](MyModel)\n</code></pre> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>default_ordering</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0412 \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.</p> <pre><code>from fastapi_sqlalchemy_toolkit import ModelManager\n\nfrom .models import MyModel\nfrom .schemas import MyModelCreateSchema, MyModelUpdateSchema\n\nmy_model_manager = ModelManager[MyModel, MyModelCreateSchema, MyModelUpdateSchema](\n    MyModel, default_ordering=MyModel.title\n)\n</code></pre>"},{"location":"ru/model_manager/#modelmanager_1","title":"\u041c\u0435\u0442\u043e\u0434\u044b ModelManager","text":"<p>\u041d\u0438\u0436\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b CRUD \u043c\u0435\u0442\u043e\u0434\u044b, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435 <code>ModelManager</code>. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u043e\u043a\u0441\u0442\u0440\u0438\u043d\u0433\u0430\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432.</p> <ul> <li><code>create</code> - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430; \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u0435\u0439 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0411\u0414</li> <li><code>get</code> - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430</li> <li><code>get_or_404</code> - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 HTTP 404</li> <li><code>exists</code> - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430</li> <li><code>paginated_list</code> / <code>paginated_filter</code> - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 <code>fastapi_pagination</code></li> <li><code>list</code> / <code>filter</code> - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438</li> <li><code>count</code> - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li><code>update</code> - \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430; \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u0435\u0439 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0411\u0414</li> <li><code>delete</code> - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430</li> </ul>"},{"location":"ru/sorting/","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430","text":"<p><code>fastapi-sqlalchemy-toolkit</code> \u043f\u043e\u0434\u0434\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438,  \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (\u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u044d\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447). \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 join'\u044b \u0431\u0443\u0434\u0443\u0442 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.</p> <p>\u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0443\u0436\u043d\u043e: 1. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f. \u041f\u043e\u043b\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043f\u043e\u043b\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0438\u043b\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.</p> <pre><code>from app.models import Parent\n\nchild_ordering_fields = (\n    \"title\",\n    \"created_at\",\n    Parent.title,\n    Parent.created_at\n)\n</code></pre> <p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0438 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e. \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043f\u043e\u043b\u044e \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e, \u043d\u0443\u0436\u043d\u043e \u0432 \u043a\u0432\u0435\u0440\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0434\u0435\u0444\u0438\u0441\u0430 (Django style). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, <code>?order_by=title</code> \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e <code>title</code> \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u0430 <code>?order_by=-title</code> \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e <code>title</code> \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e.</p> <ol> <li>\u0412 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u044d\u043d\u043f\u0434\u043e\u0438\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 <code>ordering_dep</code></li> </ol> <pre><code>from fastapi_sqlalchemy_toolkit import ordering_dep\n\n@router.get(\"/children\")\nasync def get_child_objects(\n    session: Session,\n    order_by: ordering_dep(child_ordering_fields)\n) -&gt; list[ChildListSchema]\n    ...\n</code></pre> <ol> <li>\u041f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>order_by</code> \u0432 \u043c\u0435\u0442\u043e\u0434\u044b <code>ModelManager</code></li> </ol> <pre><code>    return await child_manager.list(session=session, order_by=order_by)\n</code></pre>"}]}